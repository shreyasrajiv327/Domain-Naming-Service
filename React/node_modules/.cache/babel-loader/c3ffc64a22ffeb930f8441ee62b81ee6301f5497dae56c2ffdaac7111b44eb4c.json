{"ast":null,"code":"var _jsxFileName = \"/Users/shreyasr/Documents/Domain-Naming-Service/React/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport contractABI from './utils/contractABI.json';\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks.js';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst tld = '.ninja';\nconst CONTRACT_ADDRESS = \"0x99C5e3070C0300f2647E17A7D054D65DCa936f82\";\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [network, setNetwork] = useState('');\n  const [domain, setDomain] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [record, setRecord] = useState('');\n  const [mints, setMints] = useState([]);\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log('Make sure you have MetaMask!');\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n    }\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    }\n    const chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    setNetwork(networks[chainId]);\n    ethereum.on('chainChanged', handleChainChanged);\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n  const updateDomain = async () => {\n    if (!record || !domain) {\n      return;\n    }\n    setLoading(true);\n    console.log(\"Updating domain\", domain, \"with record\", record);\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n        let tx = await contract.setRecord(domain, record);\n        await tx.wait();\n        console.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n        fetchMints();\n        setRecord('');\n        setDomain('');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    }\n    // Alert the user if the domain is too short\n    if (domain.length < 3) {\n      alert('Domain must be at least 3 characters long');\n      return;\n    }\n    // Calculate price based on length of domain (change this to match your contract)\t\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n    const price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n    console.log(\"Minting domain\", domain, \"with price\", price);\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABIi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        });\n        // Wait for the transaction to be mined\n        const receipt = await tx.wait();\n\n        // Check if the transaction was successfully completed\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n          // Set the record for the domain\n          tx = await contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n          // Call fetchMints after 2 seconds\n          setTimeout(() => {\n            fetchMints();\n          }, 2000);\n          setRecord('');\n          setDomain('');\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\",\n      alt: \"Ninja donut gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13881'\n          }]\n        });\n      } catch (error) {\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x13881',\n                chainName: 'Polygon Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        console.log(error);\n      }\n    } else {\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  };\n  const fetchMints = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        // You know all this\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\n        // Get all the domain names from our contract\n        const names = await contract.getAllNames();\n\n        // For each name, get the record and the address\n        const mintRecords = await Promise.all(names.map(async name => {\n          const mintRecord = await contract.records(name);\n          const owner = await contract.domains(name);\n          return {\n            id: names.indexOf(name),\n            name: name,\n            record: mintRecord,\n            owner: owner\n          };\n        }));\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // This will run any time currentAccount or network are changed\n  useEffect(() => {\n    if (network === 'Polygon Mumbai Testnet') {\n      fetchMints();\n    }\n  }, [currentAccount, network]);\n  // Add this render function next to your other render functions\n  const renderMints = () => {\n    if (currentAccount && mints.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mint-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \" Recently minted domains!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-list\",\n          children: mints.map((mint, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mint-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mint-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"link\",\n                  href: `https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"underlined\",\n                    children: [' ', mint.name, tld, ' ']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 8\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 6\n                }, this), mint.owner.toLowerCase() === currentAccount.toLowerCase() ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => editRecord(mint.name),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"edit-icon\",\n                    src: \"https://img.icons8.com/metro/26/000000/pencil.png\",\n                    alt: \"Edit button\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 7\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 8\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\" \", mint.record, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 4\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 5\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 3\n      }, this);\n    }\n  };\n\n  // This will take us into edit mode and show us the edit buttons!\n  const editRecord = name => {\n    console.log(\"Editing record for\", name);\n    setEditing(true);\n    setDomain(name);\n  };\n  const renderInputForm = () => {\n    if (network !== 'Polygon Mumbai Testnet') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please connect to Polygon Mumbai Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: switchNetwork,\n          children: \"Click here to switch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"whats ur ninja power?\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), editing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: loading,\n          onClick: updateDomain,\n          children: \"Set record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: () => {\n            setEditing(false);\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n      // If editing is not true, the mint button will be returned instead\n      _jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        disabled: loading,\n        onClick: mintDomain,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"\\uD83D\\uDC31\\u200D\\uD83D\\uDC64 Ninja Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"Your immortal API on the blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"Network logo\",\n              className: \"logo\",\n              src: network !== null && network !== void 0 && network.includes(\"Polygon\") ? polygonLogo : ethLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), currentAccount ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" Wallet: \", currentAccount.slice(0, 6), \"...\", currentAccount.slice(-4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Not connected \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), !currentAccount && renderNotConnectedContainer(), currentAccount && renderInputForm(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"WMSRjQS8ZbWAeHrZ+jiRIVJSaFM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","twitterLogo","ethers","contractABI","polygonLogo","ethLogo","networks","jsxDEV","_jsxDEV","TWITTER_HANDLE","TWITTER_LINK","tld","CONTRACT_ADDRESS","App","_s","currentAccount","setCurrentAccount","network","setNetwork","domain","setDomain","editing","setEditing","loading","setLoading","record","setRecord","mints","setMints","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","checkIfWalletIsConnected","length","account","chainId","on","handleChainChanged","_chainId","location","reload","updateDomain","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","wait","hash","fetchMints","mintDomain","price","contractABIi","register","value","utils","parseEther","receipt","status","setTimeout","renderNotConnectedContainer","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","switchNetwork","params","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","contractAbi","names","getAllNames","mintRecords","Promise","all","map","mintRecord","records","owner","domains","id","indexOf","renderMints","mint","index","href","target","rel","toLowerCase","editRecord","renderInputForm","type","placeholder","onChange","e","disabled","includes","slice","_c","$RefreshReg$"],"sources":["/Users/shreyasr/Documents/Domain-Naming-Service/React/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport contractABI from './utils/contractABI.json';\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks.js';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst tld = '.ninja';\nconst CONTRACT_ADDRESS = \"0x99C5e3070C0300f2647E17A7D054D65DCa936f82\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [network, setNetwork] = useState('');\n  const [domain, setDomain] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [record, setRecord] = useState('');\n  const [mints, setMints] = useState([]);\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log('Make sure you have MetaMask!');\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    }\n\n    const chainId = await ethereum.request({ method: 'eth_chainId' });\n    setNetwork(networks[chainId]);\n\n    ethereum.on('chainChanged', handleChainChanged);\n\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n  const updateDomain = async () => {\n\tif (!record || !domain) { return }\n\tsetLoading(true);\n\tconsole.log(\"Updating domain\", domain, \"with record\", record);\n\t  try {\n\t  const { ethereum } = window;\n\t  if (ethereum) {\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n  \n\t\tlet tx = await contract.setRecord(domain, record);\n\t\tawait tx.wait();\n\t\tconsole.log(\"Record set https://mumbai.polygonscan.com/tx/\"+tx.hash);\n  \n\t\tfetchMints();\n\t\tsetRecord('');\n\t\tsetDomain('');\n\t  }\n\t  } catch(error) {\n\t\tconsole.log(error);\n\t  }\n\tsetLoading(false);\n  }\n\n  const mintDomain = async () => {\n\t// Don't run if the domain is empty\n\tif (!domain) { return }\n\t// Alert the user if the domain is too short\n\tif (domain.length < 3) {\n\t  alert('Domain must be at least 3 characters long');\n\t  return;\n\t}\n\t// Calculate price based on length of domain (change this to match your contract)\t\n\t// 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\tconst price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n\tconsole.log(\"Minting domain\", domain, \"with price\", price);\n\ttry {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractABIi.abi, signer);\n  \n\t\tconsole.log(\"Going to pop wallet now to pay gas...\")\n\t\t\tlet tx = await contract.register(domain, {value: ethers.utils.parseEther(price)});\n\t\t\t// Wait for the transaction to be mined\n\t\tconst receipt = await tx.wait();\n  \n\t\t// Check if the transaction was successfully completed\n\t\tif (receipt.status === 1) {\n\t\t  console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t  \n\t\t  // Set the record for the domain\n\t\t  tx = await contract.setRecord(domain, record);\n\t\t  await tx.wait();\n  \n\t\t  console.log(\"Record set! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t  \n\t\t  // Call fetchMints after 2 seconds\n\t\t  setTimeout(() => {\n\t\t\tfetchMints();\n\t\t  }, 2000);\n  \n\t\t  setRecord('');\n\t\t  setDomain('');\n\t\t} else {\n\t\t  alert(\"Transaction failed! Please try again\");\n\t\t}\n\t\t}\n\t  } catch(error) {\n\t\tconsole.log(error);\n\t  }\n  }\n  \n\n  const renderNotConnectedContainer = () => (\n    <div className=\"connect-wallet-container\">\n      <img src=\"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\" alt=\"Ninja donut gif\" />\n      <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n        Connect Wallet\n      </button>\n    </div>\n  );\n\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: '0x13881' }],\n        });\n      } catch (error) {\n        if (error.code === 4902) {\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [\n                {\n                  chainId: '0x13881',\n                  chainName: 'Polygon Mumbai Testnet',\n                  rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                  nativeCurrency: {\n                    name: \"Mumbai Matic\",\n                    symbol: \"MATIC\",\n                    decimals: 18\n                  },\n                  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n                },\n              ],\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        console.log(error);\n      }\n    } else {\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  }\n  const fetchMints = async () => {\n\ttry {\n\t  const { ethereum } = window;\n\t  if (ethereum) {\n\t\t// You know all this\n\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\t\t  \n\t\t// Get all the domain names from our contract\n\t\tconst names = await contract.getAllNames();\n\t\t  \n\t\t// For each name, get the record and the address\n\t\tconst mintRecords = await Promise.all(names.map(async (name) => {\n\t\tconst mintRecord = await contract.records(name);\n\t\tconst owner = await contract.domains(name);\n\t\treturn {\n\t\t  id: names.indexOf(name),\n\t\t  name: name,\n\t\t  record: mintRecord,\n\t\t  owner: owner,\n\t\t};\n\t  }));\n  \n\t  console.log(\"MINTS FETCHED \", mintRecords);\n\t  setMints(mintRecords);\n\t  }\n\t} catch(error){\n\t  console.log(error);\n\t}\n  }\n  \n  // This will run any time currentAccount or network are changed\n  useEffect(() => {\n\tif (network === 'Polygon Mumbai Testnet') {\n\t  fetchMints();\n\t}\n  }, [currentAccount, network]);\n  // Add this render function next to your other render functions\nconst renderMints = () => {\n\tif (currentAccount && mints.length > 0) {\n\t  return (\n\t\t<div className=\"mint-container\">\n\t\t  <p className=\"subtitle\"> Recently minted domains!</p>\n\t\t  <div className=\"mint-list\">\n\t\t\t{ mints.map((mint, index) => {\n\t\t\t  return (\n\t\t\t\t<div className=\"mint-item\" key={index}>\n\t\t\t\t  <div className='mint-row'>\n\t\t\t\t\t<a className=\"link\" href={`https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t  <p className=\"underlined\">{' '}{mint.name}{tld}{' '}</p>\n\t\t\t\t\t</a>\n\t\t\t\t\t{/* If mint.owner is currentAccount, add an \"edit\" button*/}\n\t\t\t\t\t{ mint.owner.toLowerCase() === currentAccount.toLowerCase() ?\n\t\t\t\t\t  <button className=\"edit-button\" onClick={() => editRecord(mint.name)}>\n\t\t\t\t\t\t<img className=\"edit-icon\" src=\"https://img.icons8.com/metro/26/000000/pencil.png\" alt=\"Edit button\" />\n\t\t\t\t\t  </button>\n\t\t\t\t\t  :\n\t\t\t\t\t  null\n\t\t\t\t\t}\n\t\t\t\t  </div>\n\t\t\t<p> {mint.record} </p>\n\t\t  </div>)\n\t\t  })}\n\t\t</div>\n\t  </div>);\n\t}\n  };\n  \n  // This will take us into edit mode and show us the edit buttons!\n  const editRecord = (name) => {\n\tconsole.log(\"Editing record for\", name);\n\tsetEditing(true);\n\tsetDomain(name);\n  }\n  const renderInputForm = () =>{\n    if (network !== 'Polygon Mumbai Testnet') {\n      return (\n        <div className=\"connect-wallet-container\">\n          <p>Please connect to Polygon Mumbai Testnet</p>\n          <button className='cta-button mint-button' onClick={switchNetwork}>Click here to switch</button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"form-container\">\n        <div className=\"first-row\">\n          <input\n            type=\"text\"\n            value={domain}\n            placeholder='domain'\n            onChange={e => setDomain(e.target.value)}\n          />\n          <p className='tld'> {tld} </p>\n        </div>\n\n        <input\n          type=\"text\"\n          value={record}\n          placeholder='whats ur ninja power?'\n          onChange={e => setRecord(e.target.value)}\n        />\n          {/* If the editing variable is true, return the \"Set record\" and \"Cancel\" button */}\n          {editing ? (\n            <div className=\"button-container\">\n              {/* This will call the updateDomain function we just made */}\n              <button className='cta-button mint-button' disabled={loading} onClick={updateDomain}>\n                Set record\n              </button>  \n              {/* This will let us get out of editing mode by setting editing to false */}\n              <button className='cta-button mint-button' onClick={() => {setEditing(false)}}>\n                Cancel\n              </button>  \n            </div>\n          ) : (\n            // If editing is not true, the mint button will be returned instead\n            <button className='cta-button mint-button' disabled={loading} onClick={mintDomain}>\n              Mint\n            </button>  \n          )}\n      </div>\n    );\n\n  }\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <header>\n            <div className=\"left\">\n              <p className=\"title\">🐱‍👤 Ninja Name Service</p>\n              <p className=\"subtitle\">Your immortal API on the blockchain!</p>\n            </div>\n            <div className=\"right\">\n              <img\n                alt=\"Network logo\"\n                className=\"logo\"\n                src={network?.includes(\"Polygon\") ? polygonLogo : ethLogo}\n              />\n              {currentAccount ? (\n                <p> Wallet: {currentAccount.slice(0, 6)}...{currentAccount.slice(-4)} </p>\n              ) : (\n                <p> Not connected </p>\n              )}\n            </div>\n          </header>\n        </div>\n\n        {!currentAccount && renderNotConnectedContainer()}\n        {currentAccount && renderInputForm()}\n\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}